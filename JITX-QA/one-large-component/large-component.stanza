#use-added-syntax(jitx)
defpackage large-component : 
  import core
  import collections
  import jitx
  import jitx/commands

;'n' is the number of pads in the land pattern.
pcb-landpattern basic-landpattern (n:Int) : 
  pcb-pad square-pad : 
    shape = Rectangle(1.0, 1.0)
    type = SMD
    layer(SolderMask(Top)) = Rectangle(1.1, 1.1)
  val w = 32
  val w2 = w / 2
  val step = 2.54 / to-double(w * 2)
  val base = step * to-double(n / w / 2)
  for i in 1 through n by w do :
    val d = base + to-double(i - 1) * step
    for j in 0 to w2 do :
      pad p[i + j]: square-pad at loc((- (0.75 + to-double(w2 - j - 1) * 1.5)), d)
      pad p[i + j + w2]: square-pad at loc(0.75 + to-double(j) * 1.5, d)
  layer(Courtyard(Top)) = Rectangle(3.0, 3.0)

;'n' is the number of pins in the symbol.
pcb-symbol basic-symbol (n:Int) : 
  val step = 2.54
  val height = to-double(n) * step
  val base = (- height) / 2.0
  for i in 1 through n by 2 do :
    val d = base + to-double(i) * step
    pin p[i] at Point(-3.0, d) with : 
      direction = Left
      length = 1.0
      number-size = 0.762
      name-size = 0.762          
    pin p[i + 1] at Point(3.0, d) with : 
      direction = Right
      length = 1.0
      number-size = 0.762
      name-size = 0.762     
  layer("foreground") = Rectangle(6.0, height)
  layer("background") = Rectangle(6.0, height)
  layer("foreground") = Text(">REF", 0.762, C, loc(0.0, 1.5))  
  layer("foreground") = Text(">VALUE", 0.762, C, loc(0.0, -1.5))

;'n' is the number of pins in the component.
pcb-component component (n:Int) :     
  port p: pin[1 through n]

  val lp = basic-landpattern(n)
  landpattern = lp(
    for i in 1 through n do :
      p[i] => lp.p[i]
  )

  val sym = basic-symbol(n)
  symbol = sym(
    for i in 1 through n do :
      p[i] => sym.p[i]
  )

pcb-module main-module :
  inst a: component(2048)
  place(a) at loc(0.0, 0.0) on Top

pcb-board basic-board : 
  pcb-stackup basic-stackup : 
    pcb-material copper :
      type = Conductor
    pcb-material core :
      type = Dielectric
      dielectric-coefficient = 4.26
    pcb-material prepreg :
      type = Dielectric
      dielectric-coefficient = 4.26
    pcb-material soldermask :
      type = Dielectric
      dielectric-coefficient = 3.9
      
    layer(2.03e-2, soldermask)
    for i in 2 to 4 do :
      layer(1.498e-1, prepreg) when i > 0
      layer(5.08e-2,  copper)  
    layer(2.03e-2, soldermask)   

  stackup = basic-stackup
  boundary = Rectangle(500.0, 500.0)
  signal-boundary = Rectangle(500.0, 500.0)

pcb-rules basic-rules : 
  min-copper-width = 0.13
  min-copper-copper-space = 0.2 
  min-copper-hole-space = 0.2032
  min-copper-edge-space = 0.381
  min-annular-ring = 0.152
  min-drill-diameter = 0.254
  min-silkscreen-width = 0.0762
  min-pitch-leaded = 0.35
  min-pitch-bga = 0.35
  max-board-width = 457.2
  max-board-height = 609.6
  solder-mask-registration = 0.15
  min-silk-solder-mask-space = 0.15
  min-silkscreen-text-height = 0.762
  min-th-pad-expand-outer = 0.15
  min-soldermask-opening = 0.152
  min-soldermask-bridge = 0.102
  min-hole-to-hole = 0.254
  min-pth-pin-solder-clearance = 3.0

set-main-module(main-module)
set-board(basic-board)
set-rules(basic-rules)

;view-board()
;view-schematic()
save-to-svg("board.svg")save-schematic-to-svg("schematic.svg")
